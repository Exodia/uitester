/**
 * UITester Client Manager Module
 * @author: LongGang <tblonggang@gmail.com>
 */

var  EventManager = require('event-mgr').EventManager;

var ClientPool = {
    init:function () {
        this.summary = { total:0 };

        // store all clients referrence while the client
        // type is not cared
        this.clients = {};

        // store clients referrence by client type
        this.clientsMap = {};

        this.freeClients = {};
    },


    /*
    * 获取浏览器类型
    * */
    getTypes: function() {
      return Object.keys(this.clientsMap);
    },

    getInfo:function () {
        return this.summary;
    },

    _updateInfo:function (clientObject, action) {
        var host = this,
            clientType = clientObject.clientType,
            summary = host.summary;

        if ('add' === action) {
            summary[clientType] || ( summary[clientType] = 0)
            summary[clientType]++;
            summary.total++;
        }

        if ('remove' === action) {
            summary[clientType]--;
            summary.total--;
        }

//        console.info('[ClientPool Message]', clientType, action);
//        console.info(host.summary);
//        console.info(host.clientsMap);
    },

    _getUA:function (uaObj) {
        return (uaObj.name + (uaObj.msie ? uaObj.version : ''));
    },

    setItem:function (clientObject) {
        var host = this,
            id = clientObject.id;

        var clientType = host._getUA(clientObject.userAgent.browser);
        clientObject.clientType = clientType;
        host.clientsMap[clientType] || (host.clientsMap[clientType] = {total:0});

        host.clients[id] = clientObject;
        host.clientsMap[clientType][id] = clientObject;
        host.clientsMap[clientType].total++;
        host.freeClients[id] = clientObject;

        host._updateInfo(clientObject, 'add');
    },

    removeItem:function (clientObject) {
        var id = clientObject.id,
            clientType = clientObject.clientType;

            delete  this.clients[id];
            delete  this.clientsMap[clientType][id];
            delete this.freeClients[id];
        //某种类型的浏览器没了，则触发一次resettype事件
            if(--this.clientsMap[clientType].total == 0) {
                delete this.clientsMap[clientType];
                EventManager.emit('client:resettype', clientType);
            }

        this._updateInfo(clientObject, 'remove');
    }
};

var ClientManager = {
    listenEventMap:{
        'console:register':function (clientObject) {
            ClientPool.setItem(clientObject);
            console.info('[ClientMgr Event] console register:', clientObject.clientType);
            clientObject.socket.emit('console:available', {
                'msg':'UITester: An client is available.',
                'available_client':clientObject.clientType,
                'client_summary':ClientPool.getInfo()
            });
            EventManager.emit('client:available', clientObject);
        },

        'console:disconnect':function (clientObject) {
            console.info('[ClientMgr Event] console disconnect', clientObject.clientType);
            if(clientObject.task) {
                clientObject.task.reportData = 'disconnect';
                EventManager.emit('client:task_finish', clientObject.task);
            }

            ClientPool.removeItem(clientObject);
        },

        'console:task_finish':function (clientObject) {
            console.info('[ClientMgr Event] console task finish');
            //触发客户端任务完成事件
            EventManager.emit('client:task_finish', clientObject.task);
            //撤销任务,浏览器回归用例池
            clientObject.task = null;
            ClientPool.freeClients[clientObject.id] = clientObject;
            //触发浏览器空闲事件
            EventManager.emit('client:available', clientObject);

        },

        'task:data_update':function () {
            console.info('[TaskMgr Event] task:data_update');
            /*
            * 触发浏览器类型事件，同时丢入现有的浏览器类型
            * */
            EventManager.emit('client:types', ClientPool.getTypes(), ClientPool.freeClients);
         },

        'console:busy':function (clientObject) {
            console.log('[TaskMgr Event] console:busy');
            delete ClientPool.freeClients[clientObject.id];
        }
    },

    init:function (config) {
        var host = this;

        ClientPool.init();

        host.handleEventListener();
    },

    handleEventListener:function () {
        var evmap = this.listenEventMap;
        for(var k in  evmap) {
            EventManager.on(k, evmap[k]);
        }
    }
};

module.exports = ClientManager;
