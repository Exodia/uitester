/**
 * Created with JetBrains WebStorm.
 * User: tafeng.dxx
 * Date: 12-11-24
 * Time: 下午3:45
 */

//导入模块
var EventManager = require('event-mgr').EventManager;
var db = require('db');

//数据获取周期
var INTERVAL = 5000,
//缓冲大小
    BUFFER_SIZE = 1;

/*用例队列*/
var TaskCache = {
        tasks:null,
        total:0
    },
/*报告缓冲区*/
    reportBuffer = [];

/**
 * 用例管理函数，负责取用例，插入用例测试结果
 * @type {Object}
 */
var TaskManager = {
    init:function () {
        this._bindEvents();
        this.fetchTask();
        this.protectTask();
    },
    /*用例结束，插入数据库结果
     * 每满50个才进行一次性的插入，防止频繁的操作数据库
     */
    report:function (task, info) {
        reportBuffer.push({task:task, info:info});
        //缓冲区未满，且任务队列未空
        if (reportBuffer.length < BUFFER_SIZE && TaskCache.total) {
            return;
        }

        db.insert(reportBuffer, function (err) {
            err && console.log(err);
            //清除报告缓冲区
            reportBuffer = [];
            //任务队列空，则取数据
            !TaskCache.total && TaskManager.fetchTask();
        });
    },
    //守护函数，防止在无浏览器而又有任务的情况下，进程僵化
    protectTask:function () {
        setInterval(function () {
            if (TaskCache.total && !TaskManager.browserCache.total) {
                EventManager.emit('task:data_update');
            }
        }, INTERVAL)
    },
    fetchTask:function () {
        console.log('fetchTask')
        db.findLatestSpecs(function (data) {
            if (!data.length) {
                console.log('no data');
                return setTimeout(TaskManager.fetchTask, INTERVAL);
            }

            TaskCache.tasks = data;
            TaskCache.total = data.length;
            this.browserCache = {};

            EventManager.emit('task:data_update');
        });
    },
    browserCache:{total:0},
    _eventsMap:{
        /*更新浏览器*/
        'client:types':function (types, clients) {
            console.log('client:types:', types);

            var i, len = types.length, tasks = TaskCache.tasks;
            TaskManager.browserCache.total = len;
            //对每种浏览器复制一份用例引用
            for (i = len - 1; i > -1; --i) {
                TaskManager.browserCache[types[i]] = TaskCache.tasks.slice(0);
            }
            //对每个用例，将计数器至为浏览器类型数量
            for (i = 0, total = TaskCache.total; i < total; ++i) {
                tasks[i].browserCount = tasks[i].total_specs = len;
            }

            //先开始跑一趟用例
            var task, k, clientType;
            for (k in clients) {
                clientType = clients[k].clientType
                task = TaskManager.browserCache[clientType].shift();
                if (!task) {
                    return;
                }
                clients[k].runTask(task);
            }
        },

        /*浏览器空闲事件，触发task事件，同时丢入一个task*/
        'client:available':function (clientObject) {
            var tasks = TaskManager.browserCache[clientObject.clientType];
            if (tasks) {
                var task = tasks.shift();
                task && clientObject.runTask(task)
            }
        },
        //运行一半，某类浏览器特吗的没了。。
        'client:resettype':function (type) {
            console.info('[ClientMgr Event] client:resettype', type);
            var typeTask = TaskManager.browserCache[type];
            for (var i = 0, len = typeTask.length; i < len; ++i) {
                typeTask[i].reportData = 'disconnect';
                EventManager.emit('client:task_finish', typeTask[i]);
            }
            //清空该类型
            delete TaskManager.browserCache[type];
            --TaskManager.browserCache.total;
            console.info('TaskManager', TaskManager)
        },
        /*用例测完*/
        'client:task_finish':function (task) {
            //用例测完，减少计数器
            if (--task.browserCount == 0) {
                //计数器为0，减少用例池的总数，同时报告该用例结果
                TaskManager.report(task);
                --TaskCache.total == 0 && TaskManager.fetchTask();
            }
        }
    },
    //事件绑定
    _bindEvents:function () {
        var evts = this._eventsMap;
        for (var k in evts) {
            EventManager.on(k, evts[k]);
        }
    }
};

exports.TaskManager = TaskManager;